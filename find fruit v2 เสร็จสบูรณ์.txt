local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Player = Players.LocalPlayer
local Backpack = Player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CommF_ = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")


local currentTween, RootPart, lastPos
local tweenSpeed, warpThreshold = 350, 400
local lastFruitTime = tick()


local warpMap = {
[7449423635] = {
Vector3.new(-5041.458, 314.827, -3137.629),
Vector3.new(5680.717, 1013.356, -338.502),
Vector3.new(-12482.807, 375.226, -7565.804)
},
[4442272183] = {
Vector3.new(2284.912, 15.537, 905.590),
Vector3.new(-286.989, 306.138, 597.776),
Vector3.new(923.213, 126.976, 32852.832),
Vector3.new(-6508.558, 89.035, -132.840)
},
[2753915549] = {
Vector3.new(61163.852, 11.680, 1819.784),
Vector3.new(3864.688, 6.737, -1926.214),
Vector3.new(-7894.618, 5547.142, -380.291),
Vector3.new(-4607.823, 874.391, -1667.557)
}
}
local warpPositions = warpMap[game.PlaceId] or {}


local function safe(func) return pcall(func) end


local function setupCharacter(char)
safe(function()
RootPart = char:WaitForChild("HumanoidRootPart")
lastPos = RootPart.Position
end)
end
if Player.Character then setupCharacter(Player.Character) end
Player.CharacterAdded:Connect(setupCharacter)


local function distanceXZ(pos1, pos2)
return math.sqrt((pos1.X - pos2.X)^2 + (pos1.Z - pos2.Z)^2)
end


local function getTargetPos(target)
if target:IsA("Model") and target.PrimaryPart then
return target.PrimaryPart.Position
elseif target:IsA("BasePart") then
return target.Position
elseif target:FindFirstChild("Handle") then
return target.Handle.Position
end
return nil
end


local function isHeldByOther(obj)
local handle = obj:FindFirstChild("Handle")
if not handle then return false end
local parent = handle.Parent
if parent == RootPart.Parent then return false end
if parent:FindFirstChild("Humanoid") then return true end
return false
end


local function findFruit()
    local closest, minDist
    if not RootPart then return nil end
    local myPos = RootPart.Position


    for _, obj in ipairs(workspace:GetChildren()) do
        if (obj:IsA("Model") or obj:IsA("BasePart")) and string.find(obj.Name:lower(), "fruit") then
            local pos = getTargetPos(obj)
            if pos and pos.Y >= -5 then
                local dist = (pos - myPos).Magnitude
                if not minDist or dist < minDist then
                    minDist = dist
                    closest = obj
                end
            end
        end
    end
    return closest
end


local function ensurePartBelow()
local part = Instance.new("Part")
part.Size = Vector3.new(699,1,699)
part.Anchored = true
part.CanCollide = true
part.Transparency = 1
part.Parent = workspace
return part
end


local function moveTo(targetObj)
safe(function()
if not RootPart or not targetObj then return end
if currentTween then currentTween:Cancel() currentTween=nil end


local targetPos = getTargetPos(targetObj)  
    if not targetPos then return end  


    RootPart.CFrame = CFrame.new(RootPart.Position.X, targetPos.Y, RootPart.Position.Z)  
    local zxPos = Vector3.new(targetPos.X, targetPos.Y, targetPos.Z)  
    local time = distanceXZ(RootPart.Position, zxPos)/tweenSpeed  
    local info = TweenInfo.new(time, Enum.EasingStyle.Linear)  
    local part = ensurePartBelow()  


    currentTween = TweenService:Create(RootPart, info, {CFrame = CFrame.new(zxPos)})  
    currentTween:Play()  


    local conn  
    conn = game:GetService("RunService").Heartbeat:Connect(function()  
        if not targetObj.Parent or isHeldByOther(targetObj) then  
            if currentTween then currentTween:Cancel() currentTween=nil end  
            conn:Disconnect()  
            part:Destroy()  
        else  
            part.Position = RootPart.Position - Vector3.new(0,3,0)  
        end  
    end)  


    currentTween.Completed:Connect(function()  
        if part then part:Destroy() end  
        currentTween=nil  
        if conn then conn:Disconnect() end  
    end)  
end)


end


local function warpTo(position)
    safe(function()
        if currentTween then currentTween:Cancel() currentTween=nil end


        -- ✅ เงื่อนไขพิเศษเฉพาะแมพ 7449423635
        if game.PlaceId == 7449423635 and RootPart then
            local warpPads = {
                Vector3.new(-5041.458, 314.827, -3137.629),
                Vector3.new(5680.717, 1013.356, -338.502),
                Vector3.new(-12482.807, 375.226, -7565.804)
            }


            -- หาเครื่องวาปที่ใกล้ที่สุด
            local myPos = RootPart.Position
            local nearest, minDist
            for _, padPos in ipairs(warpPads) do
                local dist = (padPos - myPos).Magnitude
                if not minDist or dist < minDist then
                    minDist, nearest = dist, padPos
                end
            end


            if nearest and minDist > 100 then
                local time = minDist / tweenSpeed
                local info = TweenInfo.new(time, Enum.EasingStyle.Linear)
                local part = ensurePartBelow()


                currentTween = TweenService:Create(RootPart, info, {CFrame = CFrame.new(nearest)})
                currentTween:Play()
                currentTween.Completed:Wait()
                if part then part:Destroy() end
            end
        end


        local reached=false
        while not reached do
            if not RootPart then break end
            pcall(function() CommF_:InvokeServer("requestEntrance", position) end)
            RootPart.CFrame = CFrame.new(position)
            if distanceXZ(RootPart.Position, position) <= 5 then
                reached=true
            end
            task.wait(0.2)
        end
    end)
end




local function checkWarpAndMove(targetObj)
if not RootPart or not targetObj then return end
local targetPos = getTargetPos(targetObj)
if not targetPos then return end
local myDist = distanceXZ(RootPart.Position, targetPos)
local bestWarp, bestDist
for _, warpPos in ipairs(warpPositions) do
local dist = distanceXZ(warpPos, targetPos)
if not bestDist or dist < bestDist then
bestDist = dist
bestWarp = warpPos
end
end
if bestWarp and bestDist < myDist then
warpTo(bestWarp)
end
moveTo(targetObj)
end


task.spawn(function()
while true do
task.wait(1)
safe(function()
if not RootPart then return end
local nowPos = RootPart.Position
if (nowPos - lastPos).Magnitude >= warpThreshold then
if currentTween then currentTween:Cancel() currentTween=nil end
end
lastPos = nowPos
end)
end
end)


local function hopServer()
local servers = {}
local url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
local suc, result = pcall(function() return game:HttpGet(url) end)
if suc and result then
local data = HttpService:JSONDecode(result)
for _,srv in pairs(data.data) do
if srv.playing < srv.maxPlayers then
table.insert(servers, srv.id)
end
end
end
if #servers > 0 then
TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1,#servers)], Player)
else
TeleportService:Teleport(game.PlaceId, Player)
end
end


task.spawn(function()
while true do
task.wait(0.5)
safe(function()
if not RootPart then
local char = Player.Character or Player.CharacterAdded:Wait()
setupCharacter(char)
end
local fruit = findFruit()
if fruit then
lastFruitTime = tick()
checkWarpAndMove(fruit)
else
if currentTween then currentTween:Cancel() currentTween=nil end
if tick()-lastFruitTime > 5 then
hopServer()
end
end
end)
end
end)



